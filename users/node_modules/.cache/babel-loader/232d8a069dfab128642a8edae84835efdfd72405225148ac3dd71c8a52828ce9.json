{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\disan\\\\OneDrive\\\\Documents\\\\NCINGA\\\\Test\\\\users\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// App.js\nimport React, { useEffect, useRef, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io.connect(\"http://localhost:5000\"); // Connect to signaling server\n\nfunction App() {\n  _s();\n  const [roomID, setRoomID] = useState(\"\");\n  const [stream, setStream] = useState(null);\n  const myVideo = useRef();\n  const remoteVideo = useRef();\n  const peerConnection = useRef(null);\n  const [usersJoined, setUsersJoined] = useState([]);\n  useEffect(() => {\n    // Extract room ID from URL\n    const url = window.location.href;\n    const splitURL = url.split(\"/\");\n    const roomIDFromURL = splitURL[splitURL.length - 1];\n    setRoomID(roomIDFromURL);\n    console.log(\"Room ID:\", roomIDFromURL);\n\n    // Get user media\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(stream => {\n      setStream(stream);\n      myVideo.current.srcObject = stream;\n    }).catch(error => {\n      console.error(\"Error accessing media devices:\", error);\n    });\n\n    // Establish connection with signaling server\n    socket.emit(\"joinRoom\", roomIDFromURL);\n    socket.on(\"receiveIceCandidate\", data => {\n      // Add the received ICE candidate to the peer connection\n      if (peerConnection.current) {\n        peerConnection.current.addIceCandidate(data.candidate);\n      }\n    });\n\n    // Handle new user joined the room\n    socket.on(\"userJoined\", users => {\n      // Filter out users who have already joined\n      const newUsers = users.filter(user => !usersJoined.includes(user));\n\n      // Update the list of users who have joined\n      setUsersJoined(prevUsersJoined => [...prevUsersJoined, ...newUsers]);\n\n      // Create a new peer connection for each new user who joins the room\n      newUsers.forEach(user => {\n        if (user !== socket.id) {\n          const peer = new RTCPeerConnection({\n            iceServers: [{\n              urls: \"stun:stun.l.google.com:19302\"\n            }, {\n              urls: \"stun:stun1.l.google.com:19302\"\n            }]\n          });\n\n          // Add tracks to the peer connection\n          stream.getTracks().forEach(track => {\n            peer.addTrack(track, stream);\n          });\n\n          // Set up event listeners for the peer connection\n          peer.onicecandidate = event => {\n            if (event.candidate) {\n              // Send ICE candidate to the signaling server\n              socket.emit(\"sendIceCandidate\", {\n                candidate: event.candidate,\n                to: user\n              });\n            }\n          };\n          peer.ontrack = event => {\n            // Add the remote stream to the video element\n            if (event.streams && event.streams[0]) {\n              remoteVideo.current.srcObject = event.streams[0];\n            }\n          };\n\n          // Create offer and set local description\n          peer.createOffer().then(offer => peer.setLocalDescription(offer)).then(() => {\n            // Emit the offer to the signaling server\n            socket.emit(\"callUser\", {\n              userToCall: user,\n              signalData: peer.localDescription,\n              from: socket.id\n            });\n          }).catch(error => {\n            console.error(\"Error creating or setting local description:\", error);\n          });\n\n          // Store the peer connection in a reference\n          peerConnection.current = peer;\n        }\n      });\n    });\n    return () => {\n      // Clean up event listeners\n      socket.off(\"receiveIceCandidate\");\n      socket.off(\"callAccepted\");\n    };\n  }, [stream, usersJoined]);\n  const handleToggleMic = () => {\n    if (stream) {\n      const audioTracks = stream.getAudioTracks();\n      audioTracks.forEach(track => {\n        track.enabled = !track.enabled;\n      });\n    }\n  };\n  const handleToggleCamera = () => {\n    if (stream) {\n      const videoTracks = stream.getVideoTracks();\n      videoTracks.forEach(track => {\n        track.enabled = !track.enabled;\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"video\", {\n      ref: myVideo,\n      autoPlay: true,\n      muted: true,\n      style: {\n        width: \"300px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n      ref: remoteVideo,\n      autoPlay: true,\n      style: {\n        width: \"300px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleToggleMic,\n      children: \"Toggle Mic\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleToggleCamera,\n      children: \"Toggle Camera\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"oetSvydeI6uP81tfMXVfnydlqCM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useRef","useState","io","jsxDEV","_jsxDEV","socket","connect","App","_s","roomID","setRoomID","stream","setStream","myVideo","remoteVideo","peerConnection","usersJoined","setUsersJoined","url","window","location","href","splitURL","split","roomIDFromURL","length","console","log","navigator","mediaDevices","getUserMedia","video","audio","then","current","srcObject","catch","error","emit","on","data","addIceCandidate","candidate","users","newUsers","filter","user","includes","prevUsersJoined","forEach","id","peer","RTCPeerConnection","iceServers","urls","getTracks","track","addTrack","onicecandidate","event","to","ontrack","streams","createOffer","offer","setLocalDescription","userToCall","signalData","localDescription","from","off","handleToggleMic","audioTracks","getAudioTracks","enabled","handleToggleCamera","videoTracks","getVideoTracks","children","ref","autoPlay","muted","style","width","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/disan/OneDrive/Documents/NCINGA/Test/users/src/App.js"],"sourcesContent":["// App.js\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport io from \"socket.io-client\";\r\n\r\nconst socket = io.connect(\"http://localhost:5000\"); // Connect to signaling server\r\n\r\nfunction App() {\r\n  const [roomID, setRoomID] = useState(\"\");\r\n  const [stream, setStream] = useState(null);\r\n  const myVideo = useRef();\r\n  const remoteVideo = useRef();\r\n  const peerConnection = useRef(null);\r\n  const [usersJoined, setUsersJoined] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Extract room ID from URL\r\n    const url = window.location.href;\r\n    const splitURL = url.split(\"/\");\r\n    const roomIDFromURL = splitURL[splitURL.length - 1];\r\n    setRoomID(roomIDFromURL);\r\n    console.log(\"Room ID:\", roomIDFromURL);\r\n\r\n    // Get user media\r\n    navigator.mediaDevices\r\n      .getUserMedia({\r\n        video: true,\r\n        audio: true,\r\n      })\r\n      .then((stream) => {\r\n        setStream(stream);\r\n        myVideo.current.srcObject = stream;\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error accessing media devices:\", error);\r\n      });\r\n\r\n    // Establish connection with signaling server\r\n    socket.emit(\"joinRoom\", roomIDFromURL);\r\n\r\n    socket.on(\"receiveIceCandidate\", (data) => {\r\n      // Add the received ICE candidate to the peer connection\r\n      if (peerConnection.current) {\r\n        peerConnection.current.addIceCandidate(data.candidate);\r\n      }\r\n    });\r\n  \r\n    // Handle new user joined the room\r\n    socket.on(\"userJoined\", (users) => {\r\n      // Filter out users who have already joined\r\n      const newUsers = users.filter((user) => !usersJoined.includes(user));\r\n\r\n      // Update the list of users who have joined\r\n      setUsersJoined((prevUsersJoined) => [...prevUsersJoined, ...newUsers]);\r\n\r\n      // Create a new peer connection for each new user who joins the room\r\n      newUsers.forEach((user) => {\r\n        if (user !== socket.id) {\r\n          const peer = new RTCPeerConnection({\r\n            iceServers: [\r\n              { urls: \"stun:stun.l.google.com:19302\" },\r\n              { urls: \"stun:stun1.l.google.com:19302\" },\r\n            ],\r\n          });\r\n  \r\n          // Add tracks to the peer connection\r\n          stream.getTracks().forEach((track) => {\r\n            peer.addTrack(track, stream);\r\n          });\r\n  \r\n          // Set up event listeners for the peer connection\r\n          peer.onicecandidate = (event) => {\r\n            if (event.candidate) {\r\n              // Send ICE candidate to the signaling server\r\n              socket.emit(\"sendIceCandidate\", {\r\n                candidate: event.candidate,\r\n                to: user,\r\n              });\r\n            }\r\n          };\r\n  \r\n          peer.ontrack = (event) => {\r\n            // Add the remote stream to the video element\r\n            if (event.streams && event.streams[0]) {\r\n              remoteVideo.current.srcObject = event.streams[0];\r\n            }\r\n          };\r\n  \r\n          // Create offer and set local description\r\n          peer.createOffer()\r\n            .then((offer) => peer.setLocalDescription(offer))\r\n            .then(() => {\r\n              // Emit the offer to the signaling server\r\n              socket.emit(\"callUser\", {\r\n                userToCall: user,\r\n                signalData: peer.localDescription,\r\n                from: socket.id,\r\n              });\r\n            })\r\n            .catch((error) => {\r\n              console.error(\"Error creating or setting local description:\", error);\r\n            });\r\n  \r\n          // Store the peer connection in a reference\r\n          peerConnection.current = peer;\r\n        }\r\n      });\r\n    });\r\n\r\n    return () => {\r\n      // Clean up event listeners\r\n      socket.off(\"receiveIceCandidate\");\r\n      socket.off(\"callAccepted\");\r\n    };\r\n  }, [stream, usersJoined]);\r\n\r\n  const handleToggleMic = () => {\r\n    if (stream) {\r\n      const audioTracks = stream.getAudioTracks();\r\n      audioTracks.forEach((track) => {\r\n        track.enabled = !track.enabled;\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleToggleCamera = () => {\r\n    if (stream) {\r\n      const videoTracks = stream.getVideoTracks();\r\n      videoTracks.forEach((track) => {\r\n        track.enabled = !track.enabled;\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <video ref={myVideo} autoPlay muted style={{ width: \"300px\" }} />\r\n      <video ref={remoteVideo} autoPlay style={{ width: \"300px\" }} />\r\n      <button onClick={handleToggleMic}>Toggle Mic</button>\r\n      <button onClick={handleToggleCamera}>Toggle Camera</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}