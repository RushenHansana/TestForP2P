{"ast":null,"code":"// // App.js\n// import React, { useEffect, useRef, useState } from \"react\";\n// import io from \"socket.io-client\";\n\n// const socket = io.connect(\"http://localhost:5000\"); // Connect to signaling server\n\n// function App() {\n//   const [roomID, setRoomID] = useState(\"\");\n//   const [stream, setStream] = useState(null);\n//   const myVideo = useRef();\n//   const remoteVideo = useRef();\n//   const peerConnection = useRef(null);\n//   const [usersJoined, setUsersJoined] = useState([]);\n\n//   useEffect(() => {\n//     // Fetch room ID only once when the component mounts\n//     const url = window.location.href;\n//     const splitURL = url.split(\"/\");\n//     const roomIDFromURL = splitURL[splitURL.length - 1];\n//     setRoomID(roomIDFromURL);\n//     console.log(\"Room ID:\", roomIDFromURL);\n\n//     // Get user media\n//     navigator.mediaDevices\n//       .getUserMedia({\n//         video: true,\n//         audio: true,\n//       })\n//       .then((stream) => {\n//         setStream(stream);\n//         myVideo.current.srcObject = stream;\n\n//         // Establish connection with signaling server\n//         socket.emit(\"joinRoom\", roomIDFromURL);\n//       })\n//       .catch((error) => {\n//         console.error(\"Error accessing media devices:\", error);\n//       });\n\n//     socket.on(\"receiveIceCandidate\", (data) => {\n//       // Add the received ICE candidate to the peer connection\n//       if (peerConnection.current) {\n//         peerConnection.current.addIceCandidate(data.candidate);\n//       }\n//     });\n\n//     // Handle new user joined the room\n//     socket.on(\"userJoined\", (users) => {\n//       setUsersJoined(users);\n\n//       // Create a new peer connection for each user who joins the room\n//       users.forEach((user) => {\n//         if (user !== socket.id) {\n//           const peer = new RTCPeerConnection({\n//             iceServers: [\n//               { urls: \"stun:stun.l.google.com:19302\" },\n//               { urls: \"stun:stun1.l.google.com:19302\" },\n//             ],\n//           });\n\n//           // Add tracks to the peer connection\n//           if (stream) {\n//             stream.getTracks().forEach((track) => {\n//               peer.addTrack(track, stream);\n//             });\n//           }\n\n//           // Set up event listeners for the peer connection\n//           peer.onicecandidate = (event) => {\n//             if (event.candidate) {\n//               // Send ICE candidate to the signaling server\n//               socket.emit(\"sendIceCandidate\", {\n//                 candidate: event.candidate,\n//                 to: user,\n//               });\n//             }\n//           };\n\n//           peer.ontrack = (event) => {\n//             // Add the remote stream to the video element\n//             if (event.streams && event.streams[0]) {\n//               remoteVideo.current.srcObject = event.streams[0];\n//             }\n//           };\n\n//           // Create offer and set local description\n//           peer.createOffer()\n//             .then((offer) => peer.setLocalDescription(offer))\n//             .then(() => {\n//               // Emit the offer to the signaling server\n//               socket.emit(\"callUser\", {\n//                 userToCall: user,\n//                 signalData: peer.localDescription,\n//                 from: socket.id,\n//               });\n//             })\n//             .catch((error) => {\n//               console.error(\"Error creating or setting local description:\", error);\n//             });\n\n//           // Store the peer connection in a reference\n//           peerConnection.current = peer;\n//         }\n//       });\n//     });\n\n//     return () => {\n//       // Clean up event listeners\n//       socket.off(\"receiveIceCandidate\");\n//       socket.off(\"callAccepted\");\n//     };\n//   }, []); // Empty dependency array ensures useEffect runs only once\n\n//   const handleToggleMic = () => {\n//     if (stream) {\n//       const audioTracks = stream.getAudioTracks();\n//       audioTracks.forEach((track) => {\n//         track.enabled = !track.enabled;\n//       });\n//     }\n//   };\n\n//   const handleToggleCamera = () => {\n//     if (stream) {\n//       const videoTracks = stream.getVideoTracks();\n//       videoTracks.forEach((track) => {\n//         track.enabled = !track.enabled;\n//       });\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <video ref={myVideo} autoPlay muted style={{ width: \"300px\" }} />\n//       <video ref={remoteVideo} autoPlay style={{ width: \"300px\" }} />\n//       <button onClick={handleToggleMic}>Toggle Mic</button>\n//       <button onClick={handleToggleCamera}>Toggle Camera</button>\n//     </div>\n//   );\n// }\n\n// export default App;","map":{"version":3,"names":[],"sources":["C:/Users/disan/OneDrive/Documents/NCINGA/Test/users/src/App.js"],"sourcesContent":["// // App.js\r\n// import React, { useEffect, useRef, useState } from \"react\";\r\n// import io from \"socket.io-client\";\r\n\r\n// const socket = io.connect(\"http://localhost:5000\"); // Connect to signaling server\r\n\r\n// function App() {\r\n//   const [roomID, setRoomID] = useState(\"\");\r\n//   const [stream, setStream] = useState(null);\r\n//   const myVideo = useRef();\r\n//   const remoteVideo = useRef();\r\n//   const peerConnection = useRef(null);\r\n//   const [usersJoined, setUsersJoined] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     // Fetch room ID only once when the component mounts\r\n//     const url = window.location.href;\r\n//     const splitURL = url.split(\"/\");\r\n//     const roomIDFromURL = splitURL[splitURL.length - 1];\r\n//     setRoomID(roomIDFromURL);\r\n//     console.log(\"Room ID:\", roomIDFromURL);\r\n\r\n//     // Get user media\r\n//     navigator.mediaDevices\r\n//       .getUserMedia({\r\n//         video: true,\r\n//         audio: true,\r\n//       })\r\n//       .then((stream) => {\r\n//         setStream(stream);\r\n//         myVideo.current.srcObject = stream;\r\n\r\n//         // Establish connection with signaling server\r\n//         socket.emit(\"joinRoom\", roomIDFromURL);\r\n//       })\r\n//       .catch((error) => {\r\n//         console.error(\"Error accessing media devices:\", error);\r\n//       });\r\n\r\n//     socket.on(\"receiveIceCandidate\", (data) => {\r\n//       // Add the received ICE candidate to the peer connection\r\n//       if (peerConnection.current) {\r\n//         peerConnection.current.addIceCandidate(data.candidate);\r\n//       }\r\n//     });\r\n  \r\n//     // Handle new user joined the room\r\n//     socket.on(\"userJoined\", (users) => {\r\n//       setUsersJoined(users);\r\n\r\n//       // Create a new peer connection for each user who joins the room\r\n//       users.forEach((user) => {\r\n//         if (user !== socket.id) {\r\n//           const peer = new RTCPeerConnection({\r\n//             iceServers: [\r\n//               { urls: \"stun:stun.l.google.com:19302\" },\r\n//               { urls: \"stun:stun1.l.google.com:19302\" },\r\n//             ],\r\n//           });\r\n  \r\n//           // Add tracks to the peer connection\r\n//           if (stream) {\r\n//             stream.getTracks().forEach((track) => {\r\n//               peer.addTrack(track, stream);\r\n//             });\r\n//           }\r\n  \r\n//           // Set up event listeners for the peer connection\r\n//           peer.onicecandidate = (event) => {\r\n//             if (event.candidate) {\r\n//               // Send ICE candidate to the signaling server\r\n//               socket.emit(\"sendIceCandidate\", {\r\n//                 candidate: event.candidate,\r\n//                 to: user,\r\n//               });\r\n//             }\r\n//           };\r\n  \r\n//           peer.ontrack = (event) => {\r\n//             // Add the remote stream to the video element\r\n//             if (event.streams && event.streams[0]) {\r\n//               remoteVideo.current.srcObject = event.streams[0];\r\n//             }\r\n//           };\r\n  \r\n//           // Create offer and set local description\r\n//           peer.createOffer()\r\n//             .then((offer) => peer.setLocalDescription(offer))\r\n//             .then(() => {\r\n//               // Emit the offer to the signaling server\r\n//               socket.emit(\"callUser\", {\r\n//                 userToCall: user,\r\n//                 signalData: peer.localDescription,\r\n//                 from: socket.id,\r\n//               });\r\n//             })\r\n//             .catch((error) => {\r\n//               console.error(\"Error creating or setting local description:\", error);\r\n//             });\r\n  \r\n//           // Store the peer connection in a reference\r\n//           peerConnection.current = peer;\r\n//         }\r\n//       });\r\n//     });\r\n\r\n//     return () => {\r\n//       // Clean up event listeners\r\n//       socket.off(\"receiveIceCandidate\");\r\n//       socket.off(\"callAccepted\");\r\n//     };\r\n//   }, []); // Empty dependency array ensures useEffect runs only once\r\n\r\n//   const handleToggleMic = () => {\r\n//     if (stream) {\r\n//       const audioTracks = stream.getAudioTracks();\r\n//       audioTracks.forEach((track) => {\r\n//         track.enabled = !track.enabled;\r\n//       });\r\n//     }\r\n//   };\r\n\r\n//   const handleToggleCamera = () => {\r\n//     if (stream) {\r\n//       const videoTracks = stream.getVideoTracks();\r\n//       videoTracks.forEach((track) => {\r\n//         track.enabled = !track.enabled;\r\n//       });\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <video ref={myVideo} autoPlay muted style={{ width: \"300px\" }} />\r\n//       <video ref={remoteVideo} autoPlay style={{ width: \"300px\" }} />\r\n//       <button onClick={handleToggleMic}>Toggle Mic</button>\r\n//       <button onClick={handleToggleCamera}>Toggle Camera</button>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default App;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"AAAA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}