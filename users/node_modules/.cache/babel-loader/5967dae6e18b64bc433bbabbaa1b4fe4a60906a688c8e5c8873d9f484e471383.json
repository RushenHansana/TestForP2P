{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\disan\\\\OneDrive\\\\Documents\\\\NCINGA\\\\Test\\\\users\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// App.js\nimport React, { useEffect, useRef, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimportP;\nconst socket = io.connect(\"http://localhost:5000\"); // Connect to signaling server\n\nfunction App() {\n  _s();\n  const [roomID, setRoomID] = useState(\"\");\n  const [stream, setStream] = useState(null);\n  const myVideo = useRef();\n  useEffect(() => {\n    // Extract room ID from URL\n    const url = window.location.href;\n    const splitURL = url.split(\"/\");\n    const roomIDFromURL = splitURL[splitURL.length - 1];\n    setRoomID(roomIDFromURL);\n    console.log(\"Room ID:\", roomIDFromURL);\n\n    // Get user media\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(stream => {\n      setStream(stream);\n      myVideo.current.srcObject = stream;\n    }).catch(error => {\n      console.error(\"Error accessing media devices:\", error);\n    });\n\n    // Establish connection with signaling server\n    socket.emit(\"joinRoom\", roomIDFromURL);\n    socket.on(\"receiveIceCandidate\", data => {\n      // Add the received ICE candidate to the peer connection\n      if (peerConnection.current) {\n        peerConnection.current.addIceCandidate(data.candidate);\n      }\n    });\n\n    // Handle new user joined the room\n    socket.on(\"userJoined\", users => {\n      // Create a new peer connection for each user who joins the room\n      users.forEach(user => {\n        if (user !== socket.id) {\n          const peer = new RTCPeerConnection({\n            iceServers: [{\n              urls: \"stun:stun.l.google.com:19302\"\n            }, {\n              urls: \"stun:stun1.l.google.com:19302\"\n            }]\n          });\n\n          // Add tracks to the peer connection\n          stream.getTracks().forEach(track => {\n            peer.addTrack(track, stream);\n          });\n\n          // Set up event listeners for the peer connection\n          peer.onicecandidate = event => {\n            if (event.candidate) {\n              // Send ICE candidate to the signaling server\n              socket.emit(\"sendIceCandidate\", {\n                candidate: event.candidate,\n                to: user\n              });\n            }\n          };\n          peer.ontrack = event => {\n            // Add the remote stream to the video element\n            if (event.streams && event.streams[0]) {\n              remoteVideo.current.srcObject = event.streams[0];\n            }\n          };\n\n          // Create offer and set local description\n          peer.createOffer().then(offer => peer.setLocalDescription(offer)).then(() => {\n            // Emit the offer to the signaling server\n            socket.emit(\"callUser\", {\n              userToCall: user,\n              signalData: peer.localDescription,\n              from: socket.id\n            });\n          }).catch(error => {\n            console.error(\"Error creating or setting local description:\", error);\n          });\n\n          // Store the peer connection in a reference\n          peerConnection.current = peer;\n        }\n      });\n    });\n    return () => {\n      // Clean up event listeners\n      socket.off(\"receiveIceCandidate\");\n      socket.off(\"callAccepted\");\n    };\n  }, []);\n  const handleToggleMic = () => {\n    if (stream) {\n      const audioTracks = stream.getAudioTracks();\n      audioTracks.forEach(track => {\n        track.enabled = !track.enabled;\n      });\n    }\n  };\n  const handleToggleCamera = () => {\n    if (stream) {\n      const videoTracks = stream.getVideoTracks();\n      videoTracks.forEach(track => {\n        track.enabled = !track.enabled;\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"video\", {\n      ref: myVideo,\n      autoPlay: true,\n      muted: true,\n      style: {\n        width: \"300px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleToggleMic,\n      children: \"Toggle Mic\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleToggleCamera,\n      children: \"Toggle Camera\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"DW3oOQ/ZUD8zW5EEf/W7h8vhi+o=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useRef","useState","io","jsxDEV","_jsxDEV","importP","socket","connect","App","_s","roomID","setRoomID","stream","setStream","myVideo","url","window","location","href","splitURL","split","roomIDFromURL","length","console","log","navigator","mediaDevices","getUserMedia","video","audio","then","current","srcObject","catch","error","emit","on","data","peerConnection","addIceCandidate","candidate","users","forEach","user","id","peer","RTCPeerConnection","iceServers","urls","getTracks","track","addTrack","onicecandidate","event","to","ontrack","streams","remoteVideo","createOffer","offer","setLocalDescription","userToCall","signalData","localDescription","from","off","handleToggleMic","audioTracks","getAudioTracks","enabled","handleToggleCamera","videoTracks","getVideoTracks","children","ref","autoPlay","muted","style","width","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/disan/OneDrive/Documents/NCINGA/Test/users/src/App.js"],"sourcesContent":["// App.js\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimportP\r\nconst socket = io.connect(\"http://localhost:5000\"); // Connect to signaling server\r\n\r\nfunction App() {\r\n  const [roomID, setRoomID] = useState(\"\");\r\n  const [stream, setStream] = useState(null);\r\n  const myVideo = useRef();\r\n\r\n  useEffect(() => {\r\n    // Extract room ID from URL\r\n    const url = window.location.href;\r\n    const splitURL = url.split(\"/\");\r\n    const roomIDFromURL = splitURL[splitURL.length - 1];\r\n    setRoomID(roomIDFromURL);\r\n    console.log(\"Room ID:\", roomIDFromURL);\r\n\r\n    // Get user media\r\n    navigator.mediaDevices\r\n      .getUserMedia({\r\n        video: true,\r\n        audio: true,\r\n      })\r\n      .then((stream) => {\r\n        setStream(stream);\r\n        myVideo.current.srcObject = stream;\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error accessing media devices:\", error);\r\n      });\r\n\r\n    // Establish connection with signaling server\r\n    socket.emit(\"joinRoom\", roomIDFromURL);\r\n\r\n    socket.on(\"receiveIceCandidate\", (data) => {\r\n      // Add the received ICE candidate to the peer connection\r\n      if (peerConnection.current) {\r\n        peerConnection.current.addIceCandidate(data.candidate);\r\n      }\r\n    });\r\n  \r\n    // Handle new user joined the room\r\n    socket.on(\"userJoined\", (users) => {\r\n      // Create a new peer connection for each user who joins the room\r\n      users.forEach((user) => {\r\n        if (user !== socket.id) {\r\n          const peer = new RTCPeerConnection({\r\n            iceServers: [\r\n              { urls: \"stun:stun.l.google.com:19302\" },\r\n              { urls: \"stun:stun1.l.google.com:19302\" },\r\n            ],\r\n          });\r\n  \r\n          // Add tracks to the peer connection\r\n          stream.getTracks().forEach((track) => {\r\n            peer.addTrack(track, stream);\r\n          });\r\n  \r\n          // Set up event listeners for the peer connection\r\n          peer.onicecandidate = (event) => {\r\n            if (event.candidate) {\r\n              // Send ICE candidate to the signaling server\r\n              socket.emit(\"sendIceCandidate\", {\r\n                candidate: event.candidate,\r\n                to: user,\r\n              });\r\n            }\r\n          };\r\n  \r\n          peer.ontrack = (event) => {\r\n            // Add the remote stream to the video element\r\n            if (event.streams && event.streams[0]) {\r\n              remoteVideo.current.srcObject = event.streams[0];\r\n            }\r\n          };\r\n  \r\n          // Create offer and set local description\r\n          peer.createOffer()\r\n            .then((offer) => peer.setLocalDescription(offer))\r\n            .then(() => {\r\n              // Emit the offer to the signaling server\r\n              socket.emit(\"callUser\", {\r\n                userToCall: user,\r\n                signalData: peer.localDescription,\r\n                from: socket.id,\r\n              });\r\n            })\r\n            .catch((error) => {\r\n              console.error(\"Error creating or setting local description:\", error);\r\n            });\r\n  \r\n          // Store the peer connection in a reference\r\n          peerConnection.current = peer;\r\n        }\r\n      });\r\n    });\r\n\r\n    return () => {\r\n      // Clean up event listeners\r\n      socket.off(\"receiveIceCandidate\");\r\n      socket.off(\"callAccepted\");\r\n    };\r\n  }, []);\r\n\r\n  const handleToggleMic = () => {\r\n    if (stream) {\r\n      const audioTracks = stream.getAudioTracks();\r\n      audioTracks.forEach((track) => {\r\n        track.enabled = !track.enabled;\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleToggleCamera = () => {\r\n    if (stream) {\r\n      const videoTracks = stream.getVideoTracks();\r\n      videoTracks.forEach((track) => {\r\n        track.enabled = !track.enabled;\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <video ref={myVideo} autoPlay muted style={{ width: \"300px\" }} />\r\n      <button onClick={handleToggleMic}>Toggle Mic</button>\r\n      <button onClick={handleToggleCamera}>Toggle Camera</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}